ace.define("ace/snippets/plantuml.snippets",["require","exports","module"], function(require, exports, module){var general = "\n# Boundaries\nsnippet start\n\t@startuml ${1:diagram name}\n\t$0\n\t@enduml\n# Scale\nsnippet scale\n\tscale ${1:1.5}\n\t${2:scale 1.5 | scale 200 width | scale 100 height | scale [max] 200x100}\n# Title\nsnippet title multi\n\ttitle \n\t${1:multi-line text}$0\n\tend title\n# Caption\nsnippet caption\n\tcaption ${1:Figure x.x description...}\n\t$0\n# Legend\nsnippet legend\n\tlegend,\n\t\t$0\n\tend legend\n# node under\nsnippet link\n\t${1:objAlias} ${2:.}. ${3:noteAlias}\n\t$0\n# Note with direction\nsnippet note alias\n\tnote \"${1:single-line note}\" as ${2:noteAlias}\n\t$0\n# Note Link\nsnippet note link\n\tnote ${1|left,right,top,bottom|} of ${2:objAlias}: ${3:single-line note}\n# Note multilines\nsnippet note link multi\n\tnote ${1|left,right,top,bottom|} of ${2:objAlias}\n\t\t$0\n\tend note\n# Header\n# This may be used to provide a date/time stamp of when the diagram was authored/reviewed\nsnippet header\n\theader ${1:last-updated xx/xx/xxxx}\n\t$0\n# Header multilines\nsnippet header multi\n\theader\n\t${1:last-updated xx/xx/xxxx}$0\n\tend header\n# Footer      \nsnippet footer\n\tfooter ${1:authored by xxx}\n\t$0\n# Footer multilines\nsnippet footer multi\n\tfooter\n\t${1:authored by xxx}$0\",\n\tend footer\n# Separator\nsnippet sep newpage\n\tnewpage ${1:title text}\n\t$0\n";
var sequence = "\n# actor\nsnippet actor\n\t${1:actor} ${2:alias}${3: as \"${4:longName}\"}${5: <<actor>>}\n\t$0\n\n# participant\nsnippet participant\n\t${1:participant} ${2:alias}${3: as \"${4:longName}\"}${5: <<participant>>}\n\t$0\n\n# auto incrementing numbered sequence \nsnippet auto number\n\tautonumber ${1:nStartFrom} ${2:nStepBy}${3: \"###\"}\n$0\n\n# message between two objects \nsnippet msg\n\t${1:objAlias1} ${2:->} ${3:objAlias2}: ${4:message}\n\t${1:objAlias1} <-- ${3:objAlias2}: ${5:returnVal}\n\t${6:'Alt=> async msg: A->>B or A-\\B; lost msg: A->o]; found msg: Ao<-]}\n\n# incoming\nsnippet incoming msg\n\t[-> ${1:objAlias}: ${2:message}\n\n# outgoing\nsnippet outgoing msg\n\t${1:bjAlias} ->] : ${2:message}\n\n# hide footbox\nsnippet footbox hide\n\thide footbox\n\n# alternative or conditional execution\nsnippet alt\n\talt ${1:cond1}\n\t\t$0\n\telse ${2:cond2...}\n\t\t\n\tend\n\n# Adds an opt \nsnippet if opt\n\topt ${1:cond}\n\t\t$0\n\tend\n\n# Adds a loop \nsnippet loop\n\tloop ${1:cond}\n\t\t$0\n\tend\n\n# parallel execution \nsnippet parallel\n\tpar ${1:threadName1}\n\t\t$0\n\telse ${2:threadName2...}\n\t\t\n\tend\n\n# exception/error handling block \nsnippet break exception\n\tbreak ${1:catchCond1}\n\t\t$0\n\telse ${2:catchCond2...}\n\t\t\n\telse finally\n\t\t\n\tend\n\n# critical flow section\nsnippet critical\n\tcritical ${1:cond}\n\t\t$0\n\tend\n\n# group\nsnippet group\n\tgroup ${1:basis}\n\t\t$0\n\tend\n\n# bounding box\nsnippet box\n\tbox \"${1:caption}\"\n\t\tparticipant ${2:alias1}\n\t\t${3:participant ${4:alias2}}$0\n\tend box\n\n# note\nsnippet note\n\tnote ${1|left,right|} : ${3:single-line note}\n$0\n\n# note of the preceding message\nsnippet note multi\n\tnote ${1|left,right|}\n\t${3:multi-line note}$0\n\tend note\n\n# note over\nsnippet note over\n\tnote over ${1:commaSepAliases} : ${2:single-line note}\n$0\n\n# note over multiline\nsnippet note over multi\n\tnote over ${1:commaSepAliases}\n\t${2:multi-line note}$0\n\tend note\n\n# section divider \nsnippet div\n\t== ${1:section} ==\n$0\n\n# text reference \nsnippet ref\n\tref over ${1:commaSepAliases}\n\t${2:multi-line note}$0\n\tend ref\n\n\n# delay\nsnippet delay ...\n\t... ${1:elapsed time}...\n$0\n\n# additional spacing\nsnippet spacing\n\t||${1:nPixels}||\n$0\n\n# object creation\nsnippet create new\n\tcreate ${1:objAlias}\n$0\n\n# object destruction\nsnippet destroy delete\n\tdestroy ${1:objAlias}\n$0\n\n# active execution\nsnippet active on\n\tactivate ${1:objAlias}\n$0\n\n#  deactive execution\nsnippet deactive off\n\tdeactivate ${1:objAlias}\n$0\n\n# return\nsnippet return ret\n\treturn ${1:label}\n$0\n";
module.exports = general + sequence;

});

ace.define("ace/snippets/plantuml",["require","exports","module","ace/snippets/plantuml.snippets"], function(require, exports, module){"use strict";
exports.snippetText = require("./plantuml.snippets");
exports.scope = "plantuml";

});                (function() {
                    ace.require(["ace/snippets/plantuml"], function(m) {
                        if (typeof module == "object" && typeof exports == "object" && module) {
                            module.exports = m;
                        }
                    });
                })();
            